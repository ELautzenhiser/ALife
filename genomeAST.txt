import {}
{}, {}
sys
{}, {}
random
{}, {}
os
{}, {}
json
subprocess

def {}({}):
getTraits

global {}
metabolism
global {}
codonLength
global {}
selfName
global {}
world
global {}
sightDistance
{} = {}
metabolism
0.5
{} = {}
codonLength
3
{} = {}
selfName
{}[{}]
{}({})
{}.{}
{}[{}]
{}({})
{}.{}
{}[{}]
{}.{}
sys
argv
0
split
'{}'
\\
-1
split
'{}'
/
-1
{} = {}
world
{}({})
{}.{}
os
getcwd

{} = {}
sightDistance
300
dedent

def {}({}):
getTree
position
{} = {}
codon
{}[{}]
genome
{}:{}
position
({} + {})
position
codonLength
{} = {}
aacid
{}[{}]
translation
codon
{} += {}
position
codonLength
{} = {}
newContainer
[{}]

{} = {}
num_subacids
{}({})
{}.{}
{}({})
{}.{}
{}({})
{}.{}
aacid
replace
{}, {}
'{}'
{{{{
'{}'

replace
{}, {}
'{}'
}}}}
'{}'

count
'{}'
{{}}
for {} in {}:
i
{}({})
xrange
num_subacids
{} = {}
({})
{}, {}
value
position
{}({})
getTree
position
{}({})
{}.{}
newContainer
append
value
dedent
try:
{} = {}
aacid
{}({})
{}.{}
aacid
format
*{}
newContainer
dedent
except{}:

{} = {}
aacid
({} + {})
'{}'
#
aacid
dedent
return {}
({})
{}, {}
aacid
position
dedent

def {}({}):
translate

{} = {}
output
'{}'

{} = {}
code_list
[{}]

{} = {}
position
0
while {}:
{} < {}
position
{}({})
len
genome
{} = {}
({})
{}, {}
value
position
{}({})
getTree
position
{}({})
{}.{}
code_list
append
value
dedent
{} = {}
indent
0
for {} in {}:
line
code_list
if {}:
{} == {}
{}({})
len
line
0
{} += {}
output
'{}'
\n
dedent
else:
if {}:
{} == {}
{}[{}]
line
-1
'{}'
:
{} += {}
output
({} + {})
({} + {})
'{}'
\n
({} * {})
'{}'
 
({} * {})
4
indent
line
{} += {}
indent
1
dedent
else:
if {}:
{} == {}
line
'{}'
dedent
{} -= {}
indent
1
{} = {}
indent
{}({})
max
{}, {}
indent
0
dedent
else:
{} += {}
output
({} + {})
({} + {})
'{}'
\n
({} * {})
'{}'
 
({} * {})
4
indent
line
dedent
dedent
dedent
dedent
return {}
output
dedent

def {}({}):
getRandomString
{}, {}
length
kind
if {}:
{} == {}
kind
'{}'
letters
{} = {}
chars
'{}'
abcdefghijklmnopqrstuvwxyz
dedent
else:
if {}:
{} == {}
kind
'{}'
numbers
{} = {}
chars
'{}'
0123456789
dedent
else:
{} = {}
chars
'{}'
0123456789abcdefghijklmnopqrstuvwxyz
dedent
dedent
{} = {}
string
'{}'

for {} in {}:
i
{}({})
range
length
{} += {}
string
{}({})
{}.{}
random
choice
chars
dedent
return {}
string
dedent

def {}({}):
makeOffspring

{} = {}
locationID
{}({})
getRandomString
{}, {}
3
'{}'
numbers
{} = {}
uniqueID
{}({})
getRandomString
{}, {}
8
'{}'
alphanumeric
{} = {}
offspringName
({} + {})
({} + {})
({} + {})
locationID
'{}'
_
uniqueID
'{}'
.py
{} = {}
offspring
{}({})
open
{}, {}
offspringName
'{}'
w
{}({})
{}.{}
offspring
write
({} + {})
'{}'
translation = 
{}({})
str
translation
{}({})
{}.{}
offspring
write
({} + {})
({} + {})
({} + {})
'{}'
\n
'{}'
genome = \"
genome
'{}'
\"
{}({})
{}.{}
offspring
write
{}({})
translate

{}({})
{}.{}
offspring
close

dedent

def {}({}):
splitName
name
return {}
{}({})
{}.{}
name
split
'{}'
_
dedent

def {}({}):
intToString
{}, {}
num
length
{} = {}
num
{}({})
str
num
for {} in {}:
i
{}({})
xrange
({} - {})
length
{}({})
len
num
{} = {}
num
({} + {})
'{}'
0
num
dedent
return {}
num
dedent

def {}({}):
getNewPosition
{}, {}
position
direction
return {}
({} % {})
({} + {})
{}({})
int
position
direction
1000
dedent

def {}({}):
move
distance
global {}
selfName
{} = {}
({})
{}, {}
position
uniqueID
{}({})
{}.{}
selfName
split
'{}'
_
if {}:
{} < {}
{}.{}
random
random
0.5
{} = {}
direction
1
dedent
else:
{} = {}
direction
-1
dedent
for {} in {}:
i
{}({})
xrange
distance
{} = {}
position
{}({})
intToString
{}, {}
{}({})
getNewPosition
{}, {}
position
direction
3
{} = {}
newName
({} + {})
({} + {})
position
'{}'
_
uniqueID
{}({})
{}.{}
os
rename
{}, {}
selfName
newName
{} = {}
selfName
newName
dedent
dedent

def {}({}):
tryToMove

if {}:
{} < {}
{}({})
{}.{}
random
random

metabolism
{} = {}
distance
{}({})
int
({} * {})
metabolism
{}({})
{}.{}
random
uniform
{}, {}
1
100
{}({})
move
distance
dedent
dedent

def {}({}):
initiateInteraction
organisms
{} = {}
otherName
{}({})
{}.{}
random
choice
organisms
{}({})
interact
otherName
dedent

def {}({}):
interact
otherName
{} = {}
message
{}({})
getMessage

{} = {}
otherOrganism
{}({})
{}.{}
subprocess
Popen
{}, {}
[{}]
{}, {}
'{}'
python
otherName
{}, {}
{}={}
bufsize
1
{}, {}
{}={}
stdin
{}.{}
subprocess
PIPE
{}, {}
{}={}
stdout
{}.{}
subprocess
PIPE
{}, {}
{}={}
stderr
{}.{}
subprocess
PIPE
{}={}
universal_newlines
True
{} = {}
fullResponse
{}({})
{}.{}
otherOrganism
communicate
message
{} = {}
parsedResponse
{}[{}]
fullResponse
0
dedent

def {}({}):
getMessage

{} = {}
message
{}({})
dict

{} = {}
{}[{}]
message
'{}'
acting_organism
selfName
return {}
{}({})
{}.{}
json
dumps
message
dedent

def {}({}):
getAllOrganisms
world
{} = {}
organisms
[{}]

for {} in {}:
organism
{}({})
{}.{}
os
listdir
world
if {}:
{} == {}
{}[{}]
organism
{}:{}
-3

'{}'
.py
{}({})
{}.{}
organisms
append
organism
dedent
dedent
return {}
organisms
dedent

def {}({}):
findNearbyOrganisms
organisms
{} = {}
location
{}({})
int
{}[{}]
{}({})
splitName
selfName
0
{} = {}
nearby
[{}]

for {} in {}:
organism
organisms
if {}:
{} != {}
organism
selfName
{} = {}
organismLocation
{}({})
int
{}[{}]
{}({})
splitName
organism
0
if {}:
({} or {})
{} < {}
{}({})
abs
({} - {})
organismLocation
location
sightDistance
{} > {}
{}({})
abs
({} - {})
organismLocation
location
({} - {})
1000
sightDistance
{}({})
{}.{}
nearby
append
organism
dedent
dedent
dedent
return {}
nearby
dedent
{}({})
getTraits

{} = {}
startConditions
{}({})
raw_input

try:
{} = {}
startConditions
{}({})
{}.{}
json
loads
startConditions
dedent
except{}:

{} = {}
startConditions
{}({})
dict

dedent
if {}:
{} != {}
{}({})
type
startConditions
dict
{} = {}
startConditions
{}({})
dict

dedent
if {}:
{} == {}
{}({})
{}.{}
startConditions
get
'{}'
acting_organism
None
{}({})
tryToMove

{} = {}
organisms
{}({})
getAllOrganisms
world
{} = {}
nearby
{}({})
findNearbyOrganisms
organisms
if {}:
nearby
{}({})
initiateInteraction
nearby
dedent
{}({})
makeOffspring

dedent
else:
{}({})
tryToMove

print {}
{}({})
getMessage

dedent
