import {}
{},{}
sys
random
#################################GetTree
def {}({}):
getTree
{},{}
genome
{},{}
codonLength
{},{}
position
{},{}
container
translation
{} = {}
codon
{}[{}]
genome
{}:{}
position
{} + {}
position
codonLength
{} = {}
aacid
{}[{}]
translation
codon
{} += {}
position
codonLength
{} = {}
newContainer
[]
if {}:
{} != {}
aacid
'{}'
{}
for {} in {}:
i
range({})
{}.count({})
aacid
'{}'
{}
{} = {}
{},{}
value
position
{}({})
getTree
{},{}
genome
{},{}
codonLength
{},{}
position
{},{}
newContainer
translation
{}.append({})
newContainer
value
dedent
{} = {}
aacid
{}.format(*{})
aacid
newContainer
dedent
return {}
{},{}
aacid
position
dedent
#####################################Translate
def {}({}):
translate
{},{}
genome
{},{}
codonLength
translation
{} = {}
output
''
{} = {}
codeList
[]
{} = {}
position
0
while {}:
{} < {}
position
len({})
genome
{} = {}
{},{}
value
position
{}({})
getTree
{},{}
genome
{},{}
codonLength
{},{}
position
{},{}
codeList
translation
{}.append({})
codeList
value
dedent
{} = {}
indent
0
for {} in {}:
line
codeList
if {}:
{} == {}
{}[{}]
line
-1
'{}'
:
{} += {}
output
{} + {}
'{}'
\n
{}*{}
' '
{}+{}
({})
{}*{}
5
indent
line
{} += {}
indent
1
dedent
elif {}:
{} == {}
line
'{}'
dedent
{} -= {}
indent
1
dedent
else:
{} += {}
output
{} + {}
'{}'
\n
{}*{}
' '
{}+{}
({})
{}*{}
5
indent
line
dedent
dedent
return {}
output
dedent
#######################getRandomString
def {}({}):
getRandomString
{},{}
length
kind
if {}:
{} == {}
kind
'{}'
letters
{} = {}
chars
'{}'
abcdefghijklmnopqrstuvwxyz
dedent
elif {}:
{} == {}
kind
'{}'
numbers
{} = {}
chars
'{}'
0123456789
dedent
else:
{} = {}
chars
'{}'
0123456789abcdefghijklmnopqrstuvwxyz
dedent
{} = {}
string
''
for {} in {}:
i
range({})
length
{} += {}
string
random.choice({})
chars
dedent
return {}
string
dedent
#####################makeOffspring
def {}({}):
makeOffspring
{},{}
genome
translation
{} = {}
codonLength
3
{} = {}
locationID
{}({})
getRandomString
{},{}
3
'{}'
numbers
{} = {}
uniqueID
{}({})
getRandomString
{},{}
8
'{}'
alphanumeric
{} = {}
offspringName
{} + {}
locationID
{} + {}
'{}'
_
{} + {}
uniqueID
'{}'
.py
{} = {}
offspring
{}({})
open
{},{}
offspringName
'{}'
w
{}.{}({})
offspring
write
{} + {}
'{}'
{} = {}
translation
 
{}({})
str
translation
{}.{}({})
offspring
write
{} + {}
'{}'
\n
{} + {}
'{}'
{} = {}
genome
"
{} + {}
genome
'{}'
"
{}.{}({})
offspring
write
{}({})
translate
{},{}
genome
{},{}
codonLength
translation
{}.{}({})
offspring
close
 
dedent
{}({})
makeOffspring
{},{}
genome
translation