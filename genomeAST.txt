import {}
{},{}
sys
{},{}
random
os
#################################getTraits
def {}({}):
getTraits
 
global {}
metabolism
global {}
codonLength
{} = {}
metabolism
.5
{} = {}
codonLength
3
dedent
#################################GetTree
def {}({}):
getTree
{},{}
position
container
{} = {}
codon
{}[{}]
genome
{}:{}
position
{} + {}
position
codonLength
{} = {}
aacid
{}[{}]
translation
codon
{} += {}
position
codonLength
{} = {}
newContainer
[]
if {}:
{} != {}
aacid
'{}'
{}
for {} in {}:
i
range({})
{}.count({})
aacid
'{}'
{}
{} = {}
{},{}
value
position
{}({})
getTree
{},{}
position
newContainer
{}.append({})
newContainer
value
dedent
{} = {}
aacid
{}.format(*{})
aacid
newContainer
dedent
return {}
{},{}
aacid
position
dedent
#####################################Translate
def {}({}):
translate

{} = {}
output
''
{} = {}
codeList
[]
{} = {}
position
0
while {}:
{} < {}
position
len({})
genome
{} = {}
{},{}
value
position
{}({})
getTree
{},{}
position
codeList
{}.append({})
codeList
value
dedent
{} = {}
indent
0
for {} in {}:
line
codeList
if {}:
{} == {}
{}[{}]
line
-1
'{}'
:
{} += {}
output
{} + {}
'{}'
\n
{}*{}
' '
{}+{}
({})
{}*{}
5
indent
line
{} += {}
indent
1
dedent
elif {}:
{} == {}
line
'{}'
dedent
{} -= {}
indent
1
dedent
else:
{} += {}
output
{} + {}
'{}'
\n
{}*{}
' '
{}+{}
({})
{}*{}
5
indent
line
dedent
dedent
return {}
output
dedent
#######################getRandomString
def {}({}):
getRandomString
{},{}
length
kind
if {}:
{} == {}
kind
'{}'
letters
{} = {}
chars
'{}'
abcdefghijklmnopqrstuvwxyz
dedent
elif {}:
{} == {}
kind
'{}'
numbers
{} = {}
chars
'{}'
0123456789
dedent
else:
{} = {}
chars
'{}'
0123456789abcdefghijklmnopqrstuvwxyz
dedent
{} = {}
string
''
for {} in {}:
i
range({})
length
{} += {}
string
random.choice({})
chars
dedent
return {}
string
dedent
#####################makeOffspring
def {}({}):
makeOffspring
 
{} = {}
locationID
{}({})
getRandomString
{},{}
3
'{}'
numbers
{} = {}
uniqueID
{}({})
getRandomString
{},{}
8
'{}'
alphanumeric
{} = {}
offspringName
{} + {}
locationID
{} + {}
'{}'
_
{} + {}
uniqueID
'{}'
.py
{} = {}
offspring
{}({})
open
{},{}
offspringName
'{}'
w
{}.{}({})
offspring
write
{} + {}
'{}'
{} = {}
translation
 
{}({})
str
translation
{}.{}({})
offspring
write
{} + {}
'{}'
\n
{} + {}
'{}'
{} = {}
genome
"
{} + {}
genome
'{}'
"
{}.{}({})
offspring
write
{}({})
translate
 
{}.{}({})
offspring
close
 
dedent
##################################intToString
def {}({}):
intToString
{},{}
num
length
{} = {}
num
str({})
num
for {} in {}:
i
range({})
{} - {}
length
len({})
num
{} = {}
num
{} + {}
"{}"
0
num
dedent
return {}
num
dedent
#################################getNewPosition
def {}({}):
getNewPosition
{},{}
position
direction
return {}
{} % {}
({})
{} + {}
int({})
position
direction
1000
dedent
################################move
def {}({}):
move
{},{}
organismName
distance
{} = {}
{},{}
position
uniqueID
{}.split({})
organismName
"{}"
_
if {}:
{} < {}
random.random
.5
{} = {}
direction
1
dedent
else:
{} = {}
direction
-1
dedent
for {} in {}:
i
range({})
distance
{} = {}
position
{}({})
intToString
{},{}
{}({})
getNewPosition
{},{}
position
direction
3
{} = {}
newName
{} + {}
position
{} + {}
"{}"
_
uniqueID
os.rename({},{})
organismName
newName
{} = {}
organismName
newName
dedent
dedent
######################tryToMove
def {}({}):
tryToMove
 
if {}:
{} < {}
random.random()
metabolism
{} = {}
selfName
{}[{}]
{}.split({})
{}[{}]
{}.split({})
sys.argv[0]
"{}"
\\
-1
"{}"
/
-1
{} = {}
distance
int({})
{}*{}
metabolism
random.uniform({},{})
1
100
{}({})
move
{},{}
selfName
distance
dedent
dedent
########################main
{}({})
getTraits
 
{}({})
tryToMove
 
{}({})
makeOffspring
 