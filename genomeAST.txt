import {}
{}, {}
sys
{}, {}
random
{}, {}
os
{}, {}
json
{}, {}
subprocess
numpy.random

def {}({}):
getTraits

global {}
metabolism
global {}
codon_length
global {}
self_name
global {}
world
global {}
sight_distance
global {}
neutrality
{} = {}
metabolism
20
{} = {}
codon_length
3
{} = {}
self_name
{}[{}]
{}({})
{}.{}
{}[{}]
{}({})
{}.{}
{}[{}]
{}.{}
sys
argv
0
split
'{}'
\\
-1
split
'{}'
/
-1
{} = {}
world
{}({})
{}.{}
os
getcwd

{} = {}
sight_distance
300
{} = {}
neutrality
0.5
dedent


def {}({}):
getTree
position
{} = {}
codon
{}[{}]
genome
{}:{}
position
({} + {})
position
codon_length
{} = {}
aacid
{}[{}]
translation
codon
{} += {}
position
codon_length
{} = {}
new_container
[{}]

{} = {}
num_subacids
{}({})
{}.{}
{}({})
{}.{}
{}({})
{}.{}
aacid
replace
{}, {}
'{}'
{{{{
'{}'

replace
{}, {}
'{}'
}}}}
'{}'

count
'{}'
{{}}
for {} in {}:
i
{}({})
xrange
num_subacids
{} = {}
({})
{}, {}
value
position
{}({})
getTree
position
{}({})
{}.{}
new_container
append
value
dedent
try:
{} = {}
aacid
{}({})
{}.{}
aacid
format
*{}
new_container
dedent
except{}:

{} = {}
aacid
({} + {})
'{}'
#
aacid
dedent
return {}
({})
{}, {}
aacid
position
dedent


def {}({}):
translate

{} = {}
output
'{}'

{} = {}
code_list
[{}]

{} = {}
position
0
while {}:
{} < {}
position
{}({})
len
genome
{} = {}
({})
{}, {}
value
position
{}({})
getTree
position
{}({})
{}.{}
code_list
append
value
dedent
{} = {}
indent
0
for {} in {}:
line
code_list
if {}:
{} == {}
{}({})
len
line
0
{} += {}
output
'{}'
\n
dedent
else:
if {}:
{} == {}
{}[{}]
line
-1
'{}'
:
{} += {}
output
({} + {})
({} + {})
'{}'
\n
({} * {})
'{}'
 
({} * {})
4
indent
line
{} += {}
indent
1
dedent
else:
if {}:
{} == {}
line
'{}'
dedent
{} -= {}
indent
1
{} = {}
indent
{}({})
max
{}, {}
indent
0
dedent
else:
{} += {}
output
({} + {})
({} + {})
'{}'
\n
({} * {})
'{}'
 
({} * {})
4
indent
line
dedent
dedent
dedent
dedent
return {}
output
dedent


def {}({}):
floatToInt
float
return {}
{}({})
int
{}({})
round
{}, {}
float
0
dedent


def {}({}):
getChildLocation
parent_location
{} = {}
parent_location
{}({})
int
parent_location
{} = {}
child_location
{}({})
floatToInt
{}({})
{}.{}
{}.{}
numpy
random
normal
{}, {}
parent_location
30
{} = {}
child_location
({} % {})
child_location
1000
return {}
{}({})
intToString
{}, {}
child_location
3
dedent


def {}({}):
mutateChar
{}, {}
char
mutability
{} = {}
chars
'{}'
0123456789abcdefghijklmnopqrstuvwxyz
{} = {}
char_index
{}({})
{}.{}
chars
index
char
{} = {}
new_char_index
({} % {})
{}({})
floatToInt
{}({})
{}.{}
{}.{}
numpy
random
normal
{}, {}
char_index
mutability
{}({})
len
chars
return {}
{}[{}]
chars
new_char_index
dedent


def {}({}):
getChildId
parent_id
{} = {}
child_id
'{}'

for {} in {}:
char
parent_id
{} += {}
child_id
{}({})
mutateChar
{}, {}
char
0.75
dedent
return {}
child_id
dedent


def {}({}):
makeOffspring

{} = {}
({})
{}, {}
self_location
self_id
{}({})
splitName
self_name
{} = {}
child_location
{}({})
getChildLocation
self_location
{} = {}
child_id
{}({})
getChildId
self_id
{} = {}
child_name
({} + {})
({} + {})
({} + {})
child_location
'{}'
_
child_id
'{}'
.py
{} = {}
child
{}({})
open
{}, {}
child_name
'{}'
w
{}({})
{}.{}
child
write
({} + {})
'{}'
translation = 
{}({})
str
translation
{}({})
{}.{}
child
write
({} + {})
({} + {})
({} + {})
'{}'
\n
'{}'
genome = \"
genome
'{}'
\"
{}({})
{}.{}
child
write
{}({})
translate

{}({})
{}.{}
child
close

dedent


def {}({}):
splitName
name
{} = {}
name
{}[{}]
{}({})
{}.{}
name
split
'{}'
.
0
return {}
{}({})
{}.{}
name
split
'{}'
_
dedent


def {}({}):
intToString
{}, {}
num
length
{} = {}
num
{}({})
str
num
for {} in {}:
i
{}({})
xrange
({} - {})
length
{}({})
len
num
{} = {}
num
({} + {})
'{}'
0
num
dedent
return {}
num
dedent


def {}({}):
getNewPosition
{}, {}
position
distance
return {}
({} % {})
({} + {})
{}({})
int
position
distance
1000
dedent


def {}({}):
move
distance
global {}
self_name
{} = {}
({})
{}, {}
position
unique_id
{}({})
splitName
self_name
{} = {}
position
{}({})
intToString
{}, {}
{}({})
getNewPosition
{}, {}
position
distance
3
{} = {}
new_name
({} + {})
({} + {})
({} + {})
position
'{}'
_
unique_id
'{}'
.py
{}({})
{}.{}
os
rename
{}, {}
self_name
new_name
{} = {}
self_name
new_name
dedent


def {}({}):
tryToMove
{}, {}
{} = {}
end_point
None
{} = {}
motivation
0
if {}:
{} is {}
end_point
None
{} = {}
distance
{}({})
int
{}({})
{}.{}
{}.{}
numpy
random
normal
{}, {}
0
metabolism
{}({})
move
distance
dedent
else:
{} = {}
position
{}({})
int
{}[{}]
{}({})
splitName
self_name
0
{} = {}
distance_one
({} + {})
({} - {})
1000
{}({})
max
{}, {}
end_point
position
{}({})
min
{}, {}
end_point
position
{} = {}
distance_two
{}({})
abs
({} - {})
end_point
position
{} = {}
shortest_distance
{}({})
min
{}, {}
distance_one
distance_two
if {}:
{} < {}
end_point
position
{} = {}
stimulus_direction
-1
dedent
else:
{} = {}
stimulus_direction
1
dedent
{} = {}
distance
{}({})
int
{}({})
{}.{}
{}.{}
numpy
random
normal
{}, {}
({} * {})
({} * {})
stimulus_direction
motivation
metabolism
metabolism
if {}:
({} and {})
{} > {}
motivation
0
{} > {}
{}({})
abs
distance
shortest_distance
if {}:
{} > {}
distance
0
{} = {}
distance
shortest_distance
dedent
else:
{} = {}
distance
{}{}
-shortest_distance

dedent
dedent
{}({})
move
distance
dedent
dedent


def {}({}):
initiateInteraction
organisms
{} = {}
other_name
{}({})
{}.{}
random
choice
organisms
{}({})
interact
other_name
dedent


def {}({}):
interact
other_name
{} = {}
message
{}({})
getMessage

{} = {}
other_organism
{}({})
{}.{}
subprocess
Popen
{}, {}
[{}]
{}, {}
'{}'
python
other_name
{}, {}
{}={}
bufsize
1
{}, {}
{}={}
stdin
{}.{}
subprocess
PIPE
{}, {}
{}={}
stdout
{}.{}
subprocess
PIPE
{}, {}
{}={}
stderr
{}.{}
subprocess
PIPE
{}={}
universal_newlines
True
{} = {}
full_response
{}({})
{}.{}
other_organism
communicate
message
{} = {}
parsed_response
{}[{}]
full_response
0
print {}
parsed_response
dedent


def {}({}):
determineFriendliness
**{}
kwargs
if {}:
{}({})
{}.{}
kwargs
get
'{}'
other_friendliness
{} = {}
friendliness
({} * {})
{}[{}]
kwargs
'{}'
other_friendliness
neutrality
dedent
else:
{} = {}
friendliness
{}({})
{}.{}
{}.{}
numpy
random
normal
{}, {}
0
1
dedent
return {}
friendliness
dedent


def {}({}):
getMessage
**{}
kwargs
{} = {}
message
{}({})
dict

{} = {}
{}[{}]
message
'{}'
acting_organism
self_name
{} = {}
{}[{}]
message
'{}'
friendliness
{}({})
determineFriendliness
**{}
kwargs
return {}
{}({})
{}.{}
json
dumps
message
dedent


def {}({}):
getAllOrganisms
world
{} = {}
organisms
[{}]

for {} in {}:
organism
{}({})
{}.{}
os
listdir
world
if {}:
{} == {}
{}[{}]
organism
{}:{}
-3

'{}'
.py
{}({})
{}.{}
organisms
append
organism
dedent
dedent
return {}
organisms
dedent


def {}({}):
findNearbyOrganisms
organisms
{} = {}
location
{}({})
int
{}[{}]
{}({})
splitName
self_name
0
{} = {}
nearby
[{}]

for {} in {}:
organism
organisms
if {}:
{} != {}
organism
self_name
{} = {}
organism_location
{}({})
int
{}[{}]
{}({})
splitName
organism
0
if {}:
({} or {})
{} < {}
{}({})
abs
({} - {})
organism_location
location
sight_distance
{} > {}
{}({})
abs
({} - {})
organism_location
location
({} - {})
1000
sight_distance
{}({})
{}.{}
nearby
append
organism
dedent
dedent
dedent
return {}
nearby
dedent

{}({})
getTraits

{} = {}
start_conditions
{}({})
raw_input

try:
{} = {}
start_conditions
{}({})
{}.{}
json
loads
start_conditions
dedent
except{}:

{} = {}
start_conditions
{}({})
dict

dedent
if {}:
{} != {}
{}({})
type
start_conditions
dict
{} = {}
start_conditions
{}({})
dict

dedent
if {}:
{} is {}
{}({})
{}.{}
start_conditions
get
'{}'
acting_organism
None
{}({})
tryToMove

{} = {}
organisms
{}({})
getAllOrganisms
world
{} = {}
nearby
{}({})
findNearbyOrganisms
organisms
if {}:
nearby
{}({})
initiateInteraction
nearby
dedent
{}({})
makeOffspring

dedent
else:
{} = {}
other_organism
{}({})
{}.{}
start_conditions
get
'{}'
acting_organism
{} = {}
other_location
{}({})
int
{}[{}]
{}({})
splitName
other_organism
0
{} = {}
other_friendliness
{}({})
float
{}({})
{}.{}
start_conditions
get
'{}'
friendliness
{}({})
tryToMove
{}, {}
other_location
other_friendliness
print {}
{}({})
getMessage
{}, {}
{}={}
other_organism
other_organism
{}={}
other_friendliness
other_friendliness
dedent
